class Player extends AcGameObject{
    constructor(playground,stat,is_me){
        super();
        this.playground = playground;
        this.block_width = this.playground.game_map.block_width;
        this.block_height = this.playground.game_map.block_height;
        this.ctx = this.playground.game_map.ctx;
        let xx = [1,9,1,9];
        let yy = [1,1,9,9];
        let colors = ["white", "pink", "red", "grey", "green"];
        this.x = xx[stat]*this.block_width;
        this.y = yy[stat]*this.block_height;
        this.color = colors[stat];
        this.radius = Math.min(this.block_width/2,this.block_height/2);
        this.color = colors[stat]; 
        this.is_me = is_me;
        this.speed = 1;
        this.vx = 0;
        this.vy = 0;
    }

    start(){
        if(this.is_me){
            this.add_listening_events();
        }else{

        }
    }

    add_listening_events(){
        let outer = this;
        this.playground.game_map.$canvas.on("contextmenu", function() {
            return false;
        });
        this.playground.game_map.$canvas.mousedown(function(e){
            let x = outer.x, y = outer.y;
            let radius = outer.radius * 0.2;
            let color = "orange";
            let speed = outer.speed;
            let move_length = outer.playground.height * 1;
            new FireBall(outer.playground, outer, x, y, radius, outer.vx, outer.vy, color, speed, move_length);
        });

        let dx = [0,0,-1,1];
        let dy = [-1,1,0,0];
        $(window).keydown(function(e) {
            switch(e.which){
                case 87: //w
                    outer.vx = dx[0];
                    outer.vy = dy[0];
                    break;
                case 83: //s
                    outer.vx = dx[1];
                    outer.vy = dy[1];
                    break;
                case 65:  //a
                    outer.vx = dx[2];
                    outer.vy = dy[2];
                    break;
                case 68:  //d
                    outer.vx = dx[3];
                    outer.vy = dy[3];
                    break;
            }
        });
    }

    update(){
        let dx = [0,0,-1,1];
        let dy = [-1,1,0,0];
        if(!this.is_me){
            let other_player = 0;
            if(this.playground.players[other_player] === this) other_player=1;
            let dist_x = (this.x-this.playground.players[other_player].x);
            let dist_y = (this.y-this.playground.players[other_player].y);
            let index = 0;
            if(Math.random()>0.7){
                if(Math.abs(dist_x)>Math.abs(dist_y)){
                    if(dist_x>0){
                        index = 2;
                    }
                    else index = 3;
                }else{
                    if(dist_y>0) index = 0;
                    else index = 1;
                }
            }else{
                if(Math.abs(dist_x)>Math.abs(dist_y)){
                    if(dist_y>0){
                        index = 0;
                    }
                    else index = 1;
                }else{
                    if(dist_y>0) index = 2;
                    else index = 3;
                }
            }
            if(Math.random()>0.9){
                index = Math.floor(Math.random()*1000)%4;
            }
            this.vx = dx[index];
            this.vy = dy[index];
        }
        let moved_x = this.vx * this.speed * this.timedelta / 10;
        let moved_y = this.vy * this.speed * this.timedelta / 10;
        if(this.x+moved_x>=this.block_width&&this.x+moved_x<=9*this.block_width) this.x+=moved_x;
        if(this.y+moved_y>=this.block_height&&this.y+moved_y<=9*this.block_height) this.y+=moved_y;
        this.render();

    }

    render(){
        this.ctx.beginPath();
        this.ctx.arc(this.x,this.y,this.radius,0,Math.PI*2,false);
        //this.ctx.arc(this.playground.width/2,this.playground.height/2,this.playground.height*0.05,0,Math.PI*2,false);
        this.ctx.fillStyle = this.color;
        this.ctx.fill();
    }

    is_attacked(angle) {
        for (let i = 0; i < 20 + Math.random() * 10; i ++ ) {
            let x = this.x, y = this.y;
            let radius = this.radius * Math.random() * 0.1;
            let angle = Math.PI * 2 * Math.random();
            let vx = Math.cos(angle), vy = Math.sin(angle);
            let color = this.color;
            let speed = this.speed * 10;
            let move_length = this.radius * Math.random() * 5;
            new Particle(this.playground, x, y, radius, vx, vy, color, speed, move_length*100);
        }
        this.destroy();
    }


    on_destroy(){
    }


}
